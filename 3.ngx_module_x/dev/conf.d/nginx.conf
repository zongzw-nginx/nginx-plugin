# load_module /var/workspace/dist/modules/ngx_http_eval_module.so;
# load_module /var/workspace/dist/modules/ngx_http_echo_module.so;
load_module modules/ngx_http_my_md5_module.so;
# load_module modules/ngx_http_my_md5_module.so;
load_module modules/ngx_http_catch_body_filter_module.so;

user  nginx;
worker_processes  1;

error_log  logs/error.log debug;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {

    include       mime.types;
    default_type  text/html; #application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # include /etc/nginx/conf.d/*.conf;

    server {
        listen 80;
        server_name localhost;

        location /core {
            # eval $myvar {
            #     echo $remote_addr;
            # }
            # return 200 'hello var: $myvar';
            # echo_before_body "hello";
            # echo $time_local;
            # echo_after_body "world";

            return 200 "core response: $time_local";
        }

        location ~ /md5/10000 {
            md5_from_1_to 10000;
        }

        location ~ /midway_request {
            # rest_request_get $status $headers $body "http://external.server.link?params.."
            # rest_request_post_async $status $headers $body "http://external.server.link?params.."

            # ... [continue nginx process]

            return 200 "Done";
        }

        location ~ /my_uri_with_midway_handler {
            # midway_request_endpoint "http://external.server.link?params.."
            # midway_request_get $in_header $in_params $in_body $out
            # or midwayrequest_post_async $in_header $in_params $in_body $out

            # handle $out data for following nginx process

            # ... [continue nginx process and response to client]
        }

        # location ~ /forbidden_test {
        #     catch_body on;

        #     return 200 "should be forbidden.test\n";
        # }

        location /forbidden_test {
            catch_body on;
            proxy_pass http://127.0.0.1/empty;
        }
        location /empty {
            return 200 "test response body\n";
        }
    }
}
